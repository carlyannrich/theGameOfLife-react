{"version":3,"sources":["Universe.js","App.js","reportWebVitals.js","index.js"],"names":["Universe","generation","liveCells","Map","this","nextGeneration","deadCells","position","set","x","y","delete","has","isCellAlive","removeCell","addCell","forEach","item","calculateLiveCellsNeighbors","calculateDeadCellsNeighbors","liveNeighbors","i","j","Game","props","state","universe","size","gameRunning","interval","handleColumnChange","bind","handleRowChange","startGame","stopGame","renderBoard","event","actualSize","target","value","setState","intervalRef","setInterval","runGame","clearInterval","addGeneration","storeCell","newWorld","cellRow","push","live","className","type","onChange","onClick","getGeneration","Component","Cell","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea1737b3.chunk.js","sourcesContent":["export default class Universe {\n  constructor(generation = 0, liveCells = new Map()) {\n    this.generation = generation;\n    this.liveCells = liveCells;\n    this.nextGeneration = new Map();\n    this.deadCells = new Map();\n  }\n\n  getGeneration() {\n    return this.generation;\n  }\n\n  getLiveCells() {\n    return this.liveCells;\n  }\n\n  addCell(position) {\n    this.liveCells.set(position.x + \" , \" + position.y, {\n      x: position.x,\n      y: position.y,\n    });\n  }\n\n  removeCell(position) {\n    this.liveCells.delete(position);\n  }\n\n  isCellAlive(position) {\n    return this.liveCells.has(position);\n  }\n\n  storeCell(position) {\n    if (this.isCellAlive(position.x + \" , \" + position.y)) {\n      this.removeCell(position.x + \" , \" + position.y);\n    } else {\n      this.addCell(position);\n    }\n\n    return new Universe(this.generation, this.liveCells);\n  }\n\n  addGeneration() {\n    this.liveCells.forEach((item) => {\n      this.calculateLiveCellsNeighbors(item);\n    });\n\n    this.deadCells.forEach((item) => {\n      this.calculateDeadCellsNeighbors(item);\n    });\n\n    this.generation++;\n\n    return new Universe(this.generation, this.nextGeneration);\n  }\n\n  calculateLiveCellsNeighbors(position) {\n    var liveNeighbors = 0; //This is because initially we don't know how many live neighbors are there\n\n    //Here we are going to check the state of all the cells neighbours. This will allow us to apply the rules\n    for (var i = position.x - 1; i <= position.x + 1; i++) {\n      for (var j = position.y - 1; j <= position.y + 1; j++) {\n        //This is to make sure that we don't check if the cell we are currently analysing is counted has a live cell\n        if (i === position.x && j === position.y) continue;\n\n        //if the neighbour is alive we add to the liveNeighbors counter else it goes to the deadCell Map we defined in the constructor\n        if (this.isCellAlive(i + \" , \" + j)) {\n          liveNeighbors++;\n        } else {\n          this.deadCells.set(i + \" , \" + j, { x: i, y: j });\n        }\n      }\n    }\n\n    //Here we are applying the rules of the game. 2 or 3 live neighbours means that the cell remains alive and lives on to the next generation.\n    if (liveNeighbors === 2 || liveNeighbors === 3)\n      this.nextGeneration.set(position.x + \" , \" + position.y, {\n        x: position.x,\n        y: position.y,\n      });\n  }\n\n  calculateDeadCellsNeighbors(position) {\n    var liveNeighbors = 0;\n\n    for (var i = position.x - 1; i <= position.x + 1; i++) {\n      for (var j = position.y - 1; j <= position.y + 1; j++) {\n        if (i === position.x && j === position.y) continue;\n\n        if (this.isCellAlive(i + \" , \" + j)) {\n          liveNeighbors++;\n        }\n      }\n    }\n\n    //Applying the game rule that says when a dead cell has 3 neighboors it's reborn.\n    if (liveNeighbors === 3)\n      this.nextGeneration.set(position.x + \" , \" + position.y, {\n        x: position.x,\n        y: position.y,\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Universe from \"./Universe.js\";\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      universe: new Universe(),\n      size: [90, 20],\n      gameRunning: false,\n      interval: 100,\n    };\n\n    this.handleColumnChange = this.handleColumnChange.bind(this);\n    this.handleRowChange = this.handleRowChange.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.stopGame = this.stopGame.bind(this);\n    this.renderBoard = this.renderBoard.bind(this);\n  }\n\n  handleRowChange(event) {\n    if (!this.state.gameRunning) {\n      var actualSize = this.state.size;\n\n      if (event.target.value < 20) actualSize[1] = event.target.value;\n      else actualSize[1] = 20;\n\n      this.setState({\n        size: actualSize,\n      });\n\n      this.renderBoard();\n    }\n  }\n\n  handleColumnChange(event) {\n    if (!this.state.gameRunning) {\n      var actualSize = this.state.size;\n      if (event.target.value < 90) actualSize[0] = event.target.value;\n      else actualSize[0] = 90;\n\n      this.setState({\n        size: actualSize,\n      });\n\n      this.renderBoard();\n    }\n  }\n\n  //   changeInterval = (event) => {\n  //   if(!this.state.gameRunning){\n  //     this.setState({\n  //       interval: event.target.value\n  //     })\n  //   }\n  // }\n\n  startGame() {\n    if (!this.state.gameRunning) {\n      this.setState(\n        {\n          gameRunning: true,\n        },\n        () => {\n          this.intervalRef = setInterval(() => this.runGame(), 10);\n        }\n      );\n    }\n  }\n\n  stopGame() {\n    this.setState(\n      {\n        gameRunning: false,\n      },\n      () => {\n        if (this.intervalRef) {\n          clearInterval(this.intervalRef);\n        }\n      }\n    );\n  }\n\n  runGame() {\n    this.setState({\n      universe: this.state.universe.addGeneration(),\n    });\n  }\n\n  storeCell(position) {\n    if (!this.state.gameRunning) {\n      this.setState({\n        universe: this.state.universe.storeCell(position),\n      });\n    }\n  }\n\n  renderBoard() {\n    var newWorld = [];\n    var cellRow = [];\n\n    for (var i = 0; i < this.state.size[0]; i++) {\n      for (var j = 0; j < this.state.size[1]; j++) {\n        if (this.state.universe.isCellAlive(i + \" , \" + j)) {\n          cellRow.push(\n            <Cell\n              key={[i, j]}\n              position={{ x: i, y: j }}\n              live={true}\n              storeCell={this.storeCell.bind(this)}\n            />\n          );\n        } else {\n          cellRow.push(\n            <Cell\n              key={[i, j]}\n              position={{ x: i, y: j }}\n              live={false}\n              storeCell={this.storeCell.bind(this)}\n            />\n          );\n        }\n      }\n      newWorld.push(\n        <div className=\"row\" key={i}>\n          {cellRow}\n        </div>\n      );\n      cellRow = [];\n    }\n\n    return newWorld;\n  }\n\n  render() {\n    return (\n      <div className=\"worldContainer\">\n        <div className=\"headerContainer\">\n          <div className=\"headerInnerContainer\">\n            <label className=\"label\">\n              Rows:\n              <input\n                className=\"input\"\n                type=\"text\"\n                value={this.state.size[1]}\n                onChange={this.handleRowChange}\n              />\n            </label>\n            <label className=\"label\">\n              Columns:\n              <input\n                className=\"input\"\n                type=\"text\"\n                value={this.state.size[0]}\n                onChange={this.handleColumnChange}\n              />\n            </label>\n          </div>\n          <div className=\"headerButtons\">\n            <button className=\"submit\" onClick={this.startGame}>\n              Start\n            </button>\n            <button className=\"submit\" onClick={this.stopGame}>\n              Stop\n            </button>\n          </div>\n          Generation: {this.state.universe.getGeneration()}\n        </div>\n        <div className=\"boardContainer\">{this.renderBoard()}</div>\n      </div>\n    );\n  }\n}\n\nclass Cell extends Component {\n  render() {\n    return (\n      <div\n        onClick={() => this.props.storeCell(this.props.position)}\n        className={this.props.live ? \"cellContainerLive\" : \"cellContainerDead\"}\n      ></div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}